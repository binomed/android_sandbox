package com.binomed.rpc.rest;

import java.util.HashMap;

import org.restlet.engine.Engine;
import org.restlet.ext.httpclient.HttpClientHelper;
import org.restlet.ext.jackson.JacksonConverter;
import org.restlet.resource.ClientResource;

import com.binomed.client.rest.IRestletService;
import com.binomed.client.rest.IRestletServiceParam;
import com.binomed.client.rest.dto.RestletObjectA;
import com.binomed.client.rest.dto.RestletObjectB;
import com.binomed.rpc.AndroidRpcProjectActivity;

/**
 * Static class for Rest
 * 
 * @author jefBinomed
 * 
 */
public class RestletAccesClass {

	/**
	 * The resource without param
	 */
	private static ClientResource resource;
	/**
	 * The resource with param
	 */
	private static ClientResource resourceWithParam;
	/**
	 * The service without param
	 */
	private static IRestletService service;
	/**
	 * The service with param
	 */
	private static IRestletServiceParam serviceWithParam;

	private static synchronized void init() {
		if (resource == null) {
			// This is mandatory due to a bug of restlet framework (may be removed with new version of rest
			Engine.getInstance().getRegisteredConverters().add(new JacksonConverter());
			Engine.getInstance().getRegisteredClients().clear();
			Engine.getInstance().getRegisteredClients().add(new HttpClientHelper(null));
			// We create the resources
			resource = new ClientResource(AndroidRpcProjectActivity.LOCALHOST + "/rest/test");
			resourceWithParam = new ClientResource(AndroidRpcProjectActivity.LOCALHOST + "/rest/testParam");
			// Mandatory to specified that serializable objects will be used
			resourceWithParam.setRequestEntityBuffering(true);
			// We manage proxy generated by restlet
			service = resource.wrap(IRestletService.class);
			serviceWithParam = resourceWithParam.wrap(IRestletServiceParam.class);
		}
	}

	/**
	 * Call the service without parameter
	 * 
	 * @return
	 * @throws Exception
	 */
	public static RestletObjectA callService() throws Exception {

		// In all case we init the resources
		init();
		return service.getMessage();
	}

	/**
	 * Call the service with parameter
	 * 
	 * @param nbParams
	 * @return
	 * @throws Exception
	 */
	public static RestletObjectA callServiceWithParam(int nbParams) throws Exception {
		// In all case we init the resources
		init();

		RestletObjectB objB = new RestletObjectB();
		objB.setName("Name with Rest");
		objB.setNum(nbParams);
		objB.setMap(new HashMap<String, String>());
		objB.getMap().put("key", "value");
		return serviceWithParam.getMessageWithParameter(objB);
	}

}
